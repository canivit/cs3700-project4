#!/usr/bin/env python3

import datetime
import json
import sys
import socket

from base64 import b64decode

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 120

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

received = []
receivedID = {}
max_id = -1
expected_id = 0

# sends an ack with the given id
def send_ack(packet_id):
    msg = json.dumps({"ack": packet_id})
    sent = sock.sendto(msg.encode(), addr)
    if sent < len(msg):
        log("[error] unable to fully send packet")
    else:
        log("[send ack] ack: %d" % packet_id)

hold = []
eof = False
# Now listen for packets
while not eof:
    recv = sock.recvfrom(MSG_SIZE)
    # If nothing is ready, we hit the timeout
    if recv:
        (data, addr) = recv
        try:
            decoded = json.loads(data.decode())
            # If the EOF flag is set, exit
            if (decoded['eof']):
                log("[completed]")
                eof = True

            elif (decoded['data']):
                recv_id = decoded['id']
                log("[recv data] id: %d, size: %d" % (recv_id, len(data)))
                # if the packet is new, add it the the list
                if not recv_id in receivedID:
                    received.append(decoded)                
                receivedID[recv_id] = True
                # send ack for this packet id
                send_ack(recv_id)
        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
    else:
        log("[error] timeout")
        sys.exit(-1)

received.sort(key=lambda x : x['id'])
for packet in received:
    sys.stdout.buffer.write(b64decode(packet['data'].encode()))
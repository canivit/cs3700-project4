#!/usr/bin/env python3

import datetime
import json
import sys
import socket
import time
from base64 import b64encode

RECV_SIZE = 1500
MSS = 1470
ALPHA = 0.8

IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

window = 1
target_window = 16
last_id_sent = 0
last_sent_packets = {}
estimated_rtt = 550 # in miliseconds
time_sent = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(estimated_rtt / 1000)


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime(
        "%H:%M:%S.%f") + " 3700send: " + string + "\n")

# changes the timeout of the socket based on the measured sample rtt
def calc_new_rtt(sample_rtt_s):
    global estimated_rtt
    sample_rtt_ms = sample_rtt_s * 1000
    estimated_rtt = (ALPHA * estimated_rtt) + ((1 - ALPHA) * sample_rtt_ms)
    sock.settimeout(estimated_rtt  / 1000)
    log("[new rtt] %d" % estimated_rtt)

# encodes the given python object (the packet) and sends it
def send_packet(packet):
    global time_sent
    global sock
    data = json.dumps(packet)
    size = sock.sendto(data.encode(), dest)
    while size < len(data.encode()):
        log("[error] unable to fully send packet")
        size = sock.sendto(data, dest)
    time_sent = time.time()
    log("[send packet] id: %d, size: %d" % (packet['id'], len(data)))

# get the next default packet (without data)
def next_packet():
    global last_id_sent
    packet = {
        "id": last_id_sent,
        "eof": False,
        "ack": False,
        "data": ""
    }
    return packet

# read data from sys.in, make packets, and send them
# number of packets to send is based on the window size 
def send_next_packets():
    global last_id_sent
    global last_sent_packets
    global expected_ack
    last_sent_packets = {}
    packets = []
    all_read = False
    for i in range(window):
        packet = next_packet()
        data_size = MSS - len(json.dumps(packet).encode())
        data_size = int(data_size / (4/3))
        data = sys.stdin.buffer.read(data_size)
        log("[read stdin] %d bytes" % data_size)
        if len(data) == 0:
            all_read = True
            break
        packet['data'] = b64encode(data).decode()
        packets.append(packet)
        last_sent_packets[last_id_sent] = packet
        last_id_sent += 1
    for packet in packets:
        send_packet(packet)
    return all_read

# retransmit the given packets without exceeding windows size
def retransmit_packets(packets):
    global window
    n = min(len(packets), window)
    i = 0
    for packet_id in packets:
        send_packet(packets[packet_id])
        i += 1
        if i >= n:
            break

# adjust the windows size based on whether RTO was reached or not
def congestion_control(time_out):
    global window
    global target_window
    if time_out:            
        window = 1
        target_window = target_window / 2
        log("[rto timeout] restarting slow start...")
    else:
        if window >= target_window:
            window += 1
        else:
            window = window * 2            
    if window < 1:
        window = 1
    if target_window < 1:
        target_window = 1
    log("[window change] window: %d, target window: %d" % (window, target_window))

# listen for acks and retransmit the packets if neccessary
def listen_and_retransmit():
    global estimated_rtt
    global window
    first_listen = True
    while len(last_sent_packets) > 0:
        time_out = False
        received_ack = []
        for i in range(min(window, len(last_sent_packets))):
            try:
                recv = sock.recvfrom(RECV_SIZE)
                if i == window - 1 and first_listen:
                        calc_new_rtt(time.time() - time_sent)
                (data, addr) = recv
                try:
                    decoded = json.loads(data.decode())
                    log("[recv ack] %d" % decoded["ack"])
                    received_ack.append(decoded['ack'])
                except (ValueError, KeyError, TypeError):
                    log("[recv corrupt packet]")
            except socket.timeout:
                time_out = True                
                break
        for ack in received_ack:
            if ack in last_sent_packets:
                last_sent_packets.pop(ack)
        congestion_control(time_out, False)     
        retransmit_packets(last_sent_packets)
        first_listen = False

# read data from sys.in and send realiably until eof file is reached
all_sent = False
while not all_sent:
    all_sent = send_next_packets()
    listen_and_retransmit()

# send 20 eof packets to the receiver to make sure they are not dropped.
eof_ack = False
for i in range(20):
    sock.sendto(json.dumps({"eof": True, "data": "",
            "id": last_id_sent, "ack": False}).encode(), dest)    